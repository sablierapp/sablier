// Code generated by MockGen. DO NOT EDIT.
// Source: sessions_manager.go
//
// Generated by this command:
//
//	mockgen -package sessionstest -source=sessions_manager.go -destination=sessionstest/mocks_sessions_manager.go *
//

// Package sessionstest is a generated GoMock package.
package sessionstest

import (
	context "context"
	io "io"
	reflect "reflect"
	time "time"

	sessions "github.com/sablierapp/sablier/app/sessions"
	gomock "go.uber.org/mock/gomock"
)

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
	isgomock struct{}
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// LoadSessions mocks base method.
func (m *MockManager) LoadSessions(arg0 io.ReadCloser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadSessions", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadSessions indicates an expected call of LoadSessions.
func (mr *MockManagerMockRecorder) LoadSessions(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadSessions", reflect.TypeOf((*MockManager)(nil).LoadSessions), arg0)
}

// RequestReadySession mocks base method.
func (m *MockManager) RequestReadySession(ctx context.Context, names []string, duration, timeout time.Duration) (*sessions.SessionState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestReadySession", ctx, names, duration, timeout)
	ret0, _ := ret[0].(*sessions.SessionState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestReadySession indicates an expected call of RequestReadySession.
func (mr *MockManagerMockRecorder) RequestReadySession(ctx, names, duration, timeout any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestReadySession", reflect.TypeOf((*MockManager)(nil).RequestReadySession), ctx, names, duration, timeout)
}

// RequestReadySessionGroup mocks base method.
func (m *MockManager) RequestReadySessionGroup(ctx context.Context, group string, duration, timeout time.Duration) (*sessions.SessionState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestReadySessionGroup", ctx, group, duration, timeout)
	ret0, _ := ret[0].(*sessions.SessionState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestReadySessionGroup indicates an expected call of RequestReadySessionGroup.
func (mr *MockManagerMockRecorder) RequestReadySessionGroup(ctx, group, duration, timeout any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestReadySessionGroup", reflect.TypeOf((*MockManager)(nil).RequestReadySessionGroup), ctx, group, duration, timeout)
}

// RequestSession mocks base method.
func (m *MockManager) RequestSession(names []string, duration time.Duration) (*sessions.SessionState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestSession", names, duration)
	ret0, _ := ret[0].(*sessions.SessionState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestSession indicates an expected call of RequestSession.
func (mr *MockManagerMockRecorder) RequestSession(names, duration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestSession", reflect.TypeOf((*MockManager)(nil).RequestSession), names, duration)
}

// RequestSessionGroup mocks base method.
func (m *MockManager) RequestSessionGroup(group string, duration time.Duration) (*sessions.SessionState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestSessionGroup", group, duration)
	ret0, _ := ret[0].(*sessions.SessionState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestSessionGroup indicates an expected call of RequestSessionGroup.
func (mr *MockManagerMockRecorder) RequestSessionGroup(group, duration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestSessionGroup", reflect.TypeOf((*MockManager)(nil).RequestSessionGroup), group, duration)
}

// SaveSessions mocks base method.
func (m *MockManager) SaveSessions(arg0 io.WriteCloser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveSessions", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveSessions indicates an expected call of SaveSessions.
func (mr *MockManagerMockRecorder) SaveSessions(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveSessions", reflect.TypeOf((*MockManager)(nil).SaveSessions), arg0)
}

// Stop mocks base method.
func (m *MockManager) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockManagerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockManager)(nil).Stop))
}
