// Code generated by MockGen. DO NOT EDIT.
// Source: provider.go
//
// Generated by this command:
//
//	mockgen -package providertest -source=provider.go -destination=providertest/mock_provider.go *
//

// Package providertest is a generated GoMock package.
package providertest

import (
	context "context"
	reflect "reflect"

	instance "github.com/sablierapp/sablier/app/instance"
	types "github.com/sablierapp/sablier/app/types"
	provider "github.com/sablierapp/sablier/pkg/provider"
	gomock "go.uber.org/mock/gomock"
)

// MockProvider is a mock of Provider interface.
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
	isgomock struct{}
}

// MockProviderMockRecorder is the mock recorder for MockProvider.
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance.
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// InstanceGroups mocks base method.
func (m *MockProvider) InstanceGroups(ctx context.Context) (map[string][]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceGroups", ctx)
	ret0, _ := ret[0].(map[string][]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstanceGroups indicates an expected call of InstanceGroups.
func (mr *MockProviderMockRecorder) InstanceGroups(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceGroups", reflect.TypeOf((*MockProvider)(nil).InstanceGroups), ctx)
}

// InstanceInspect mocks base method.
func (m *MockProvider) InstanceInspect(ctx context.Context, name string) (instance.State, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceInspect", ctx, name)
	ret0, _ := ret[0].(instance.State)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstanceInspect indicates an expected call of InstanceInspect.
func (mr *MockProviderMockRecorder) InstanceInspect(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceInspect", reflect.TypeOf((*MockProvider)(nil).InstanceInspect), ctx, name)
}

// InstanceList mocks base method.
func (m *MockProvider) InstanceList(ctx context.Context, options provider.InstanceListOptions) ([]types.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceList", ctx, options)
	ret0, _ := ret[0].([]types.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstanceList indicates an expected call of InstanceList.
func (mr *MockProviderMockRecorder) InstanceList(ctx, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceList", reflect.TypeOf((*MockProvider)(nil).InstanceList), ctx, options)
}

// InstanceStart mocks base method.
func (m *MockProvider) InstanceStart(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceStart", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// InstanceStart indicates an expected call of InstanceStart.
func (mr *MockProviderMockRecorder) InstanceStart(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceStart", reflect.TypeOf((*MockProvider)(nil).InstanceStart), ctx, name)
}

// InstanceStop mocks base method.
func (m *MockProvider) InstanceStop(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceStop", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// InstanceStop indicates an expected call of InstanceStop.
func (mr *MockProviderMockRecorder) InstanceStop(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceStop", reflect.TypeOf((*MockProvider)(nil).InstanceStop), ctx, name)
}

// NotifyInstanceStopped mocks base method.
func (m *MockProvider) NotifyInstanceStopped(ctx context.Context, instance chan<- string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NotifyInstanceStopped", ctx, instance)
}

// NotifyInstanceStopped indicates an expected call of NotifyInstanceStopped.
func (mr *MockProviderMockRecorder) NotifyInstanceStopped(ctx, instance any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyInstanceStopped", reflect.TypeOf((*MockProvider)(nil).NotifyInstanceStopped), ctx, instance)
}
